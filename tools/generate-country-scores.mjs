// replace-country-scores.mjs
// Usage: node tools/replace-country-scores.mjs
// This script replaces the content of src/data/country-scores.mjs with new content.

import { writeFile } from 'fs/promises';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import { coffeeProfiles } from '../src/data/coffee-profiles.mjs';
import { processingMethods } from '../src/data/processing-methods.mjs';
import { roastLevelEffects } from '../src/data/roast-levels.mjs';
import {
  getMinScoreForCountry,
  getMaxScoreForCountry,
} from '../src/scoring.mjs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const targetPath = resolve(__dirname, '../src/data/country-scores.mjs');

const formatCombination = (combination) => ({
  score: Number(combination.score.toFixed(3)),
  processing: combination.processing,
  roast: combination.roastLevel,
});
const calculatedScores = Object.keys(coffeeProfiles)
  .sort()
  .reduce((acc, country) => {
    const { bestCombination } = getMaxScoreForCountry(
      coffeeProfiles[country].profile,
      processingMethods,
      roastLevelEffects,
    );
    const { worstCombination } = getMinScoreForCountry(
      coffeeProfiles[country].profile,
      processingMethods,
      roastLevelEffects,
    );
    acc[country] = {
      best: formatCombination(bestCombination),
      worst: formatCombination(worstCombination),
    };

    return acc;
  }, {});
const newContent = `// AUTOGENERATED FILE\n// This file is automatically generated. Do not edit it manually.\n// In case of test failure re-run \`npm run generate:country-scores\` to update this file.\n\nexport const countryScores = ${JSON.stringify(calculatedScores, null, 2)}; \n`;

await writeFile(targetPath, newContent, 'utf8');

console.log('!!! src/data/country-scores.mjs has been replaced.');
